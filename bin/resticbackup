#!/bin/bash

# source config
prog=resticbackup
config="/etc/$prog.d/config"
set -a
. "$config"
set +a

# default settings
RESTICBACKUP_EXCLUDE_FILE="${RESTICBACKUP_EXCLUDE_FILE-/etc/$prog.d/exclude}"
RESTICBACKUP_LOG_FILE="${RESTICBACKUP_LOG_FILE--}"
RESTICBACKUP_MOUNTED="${RESTICBACKUP_MOUNTED-1}"
RESTICBACKUP_PRUNE_ARGS="${RESTICBACKUP_PRUNE_ARGS=--prune --keep-hourly 12 --keep-daily 7 --keep-weekly 4 --keep-monthly 3}"

# vars
hooks="/etc/$prog.d/hooks"
hostname="${HOSTNAME%%.*}"
usage="Syntax: $prog <backup|prune>

    Use Restic to perform one or more actions: back up the system or
    prune backups.

    When called with no arguments, if this script is named 'restic_backup'
    or 'restic_prune', the action to perform is inferred from the script name.
"

# set default behavior when called with no arguments
if [[ $# == 0 && "${0##*/}" == restic_backup ]]; then
	set -- backup
elif [[ $# == 0 && "${0##*/}" == restic_prune ]]; then
	set -- prune
fi

# parse args
action="$1"

# check args
if [[ ! "$action" =~ ^(backup|prune)$ || $# != 1 ]]; then
	echo "$usage" >&2
	exit 1
# check repo environment variables
elif [[ -z "$RESTIC_REPOSITORY" && -z "$RESTIC_REPOSITORY_FILE" ]]; then
	echo "Repository not defined" >&2
	echo "Set RESTIC_REPOSITORY or RESTIC_REPOSITORY_FILE in config: $config" >&2
	exit 1
# check passwd environment variables
elif [[ -z "$RESTIC_PASSWORD_FILE" && -z "$RESTIC_PASSWORD_COMMAND" ]]; then
	echo "Password not defined" >&2
	echo "Set RESTIC_PASSWORD_FILE or RESTIC_PASSWORD_COMMAND in config: $config" >&2
	exit 1
# make sure another instance of this script isn't running
elif pids="$(pidof -x "$prog")"; (( $(wc -w <<< "$pids") > 1 )); then
	echo "One or more other $prog processes are already running: $pids" >&2
	exit 1
# check exclude file exists and can be read
elif [[ ! -r "$RESTICBACKUP_EXCLUDE_FILE" ]]; then
	echo "Can't read file: $RESTICBACKUP_EXCLUDE_FILE" >&2
	exit 1
fi

# start logging
if [[ "$RESTICBACKUP_LOG_FILE" == - ]]; then
	: # do nothing
elif [[ "$RESTICBACKUP_LOG_FILE" == syslog ]]; then
	[[ -t 1 ]] && echo "Logging to $RESTICBACKUP_LOG_FILE" >&2
	exec &> >(logger -e -t "$prog" --id=$$ -p local0.info)
else
	[[ -t 1 ]] && echo "Logging to $RESTICBACKUP_LOG_FILE" >&2
	mkdir -pv "$(dirname "$RESTICBACKUP_LOG_FILE")"
	exec &>> "$RESTICBACKUP_LOG_FILE"
fi

# sanity checks
#
# check mount point
if (( RESTICBACKUP_MOUNTED != 0 )) && ! mountpoint -q "$RESTIC_REPOSITORY"; then
	echo "Not a mount point: $RESTIC_REPOSITORY" >&2
	exit 1
# create repo if it doesn't exist
# https://restic.readthedocs.io/en/stable/075_scripting.html
# if repo already exists, `restic init` errors out without overwriting it
elif ! restic snapshots &>/dev/null && ! restic init; then
	if ! restic init; then
		echo  "Failed to initialize repository: $RESTIC_REPOSITORY" >&2
		exit 1
	fi
fi

# print timestamp
timefmt="%F %T %:z "
[[ "$RESTICBACKUP_LOG_FILE" == syslog ]] && timefmt=""
echo "=========================="
date +"$timefmt$prog: start $action"

# be nice
command -v renice &>/dev/null && renice 10 -p $$

# run hooks
for hook in "$hooks"/*.pre; do
	if [[ -x "$hook" ]]; then
		echo "Running hook: $hook" >&2
		"$hook" "$action" "$retval" 2>&1 | sed '1s/^/==> /; 2,$s/^/    /' >&2
	fi
done

# do the thing
retval=0
case "$action" in
	backup)
		# take a backup
		restic -v --exclude-file="$RESTICBACKUP_EXCLUDE_FILE" backup / || retval=$?
	;;
	prune)
		# prune old backups
		restic forget $RESTICBACKUP_PRUNE_ARGS || retval=$?
	;;
esac

# run hooks
for hook in "$hooks"/*.post; do
	if [[ -x "$hook" ]]; then
		echo "Running hook: $hook" >&2
		"$hook" "$action" "$retval" 2>&1 | sed '1s/^/==> /; 2,$s/^/    /' >&2
	fi
done

# print timestamp
date +"$timefmt$prog: end $action"

# exit with success/failure
exit $retval

