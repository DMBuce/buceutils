#!/bin/bash
# check if repo needs maintenance

# prints usage
usage() {
	echo "Usage: git check [--dirty|--unpushed [tags]]

    Check if repository needs maintenance.

Options:

    --dirty              Check if repo has uncommited changes
    --unpushed[=tags]    Check if repo has unpushed commits or tags 
    --help               Print this help message and exit
"
}

# print list of unpushed tags
unpushed_tags() {
	comm -23 \
		<(git show-ref --tags) \
		<(git ls-remote --tags 2>/dev/null | sed '/\^{}$/d; s/\t/ /') \
        | sed 's|.*/||'
}

# variables
declare -i check_dirty
declare -i check_tags
declare -i check_unpushed
declare -i retval
check_dirty=0
check_tags=0
check_unpushed=0
retval=0

# parse options
while (( $# )); do
	case "$1" in
		--dirty) check_dirty=1 ;;
		--unpushed)
			if [[ "$2" == "tags" ]]; then
				check_tags=1
				shift
			else
				check_unpushed=1
			fi
		;;
		--unpushed=tags) check_tags=1 ;;
		--help) usage; exit ;;
		*)      usage >&2; exit 1 ;;
	esac
	shift
done

# validate args
# only one option should be given
if (( check_dirty + check_unpushed + check_tags != 1 )); then
	usage
	exit 1
fi

# do the needful
if (( check_dirty )); then
	# return false if there are no modified files
	git ls-files --modified | grep .
elif (( check_unpushed )); then
	# check to make sure there's an upstream remote
	git ls-remote &>/dev/null || exit $?
	# return false if there are no new commits
	git rev-list @{u}.. 2>/dev/null | grep .
elif (( check_tags )); then
	# check to make sure there's an upstream remote
	git ls-remote &>/dev/null || exit $?
	# return false if there are no unpushed tags
	unpushed_tags | grep .
fi

