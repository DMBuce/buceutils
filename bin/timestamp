#!/bin/bash

if [[ "$*" =~ (^| )"--help"( |$) ]]; then
	echo "Usage: timestamp [format]

    Prints a timestamp to stdout in the given <format>. If <format> is not
    given it defaults to the ISO8601 date. In addition to the normal date(1)
	options and format sequences, the following format sequences are available:

        YYYY, yyyy   year; same as %Y
        YY, yy       last two digits of year (00..99); same as %y
        MM, mm       month (01..12) or minute (00..59), depending on context;
                     same as %m or %M
        DD, dd       day of month (e.g., 01); same as %d
        HH, hh       hour (00..23); same as %H
        SS, ss       second (00..60); same as %S

"
	exit
fi

# prints longest string to stdout
longestr() {
	local str longest=
	for str in "$@"; do
		if (( "${#str}" > "${#longest}" )); then
			longest="$str"
		fi
	done
	echo "$longest"
}

# usage: charsbetween <string> <substr1> <substr2>
#
# Prints the number of intervening characters between <substr1> and <substr2> 
# in <string>
#
# Examples:
#
# $ charsbetween foobarbazasdf foo asdf
# 6
# $ charsbetween foobarbazasdf foo baz
# 3
# $ charsbetween foobarbazasdf baz foo
# 3
# $ charsbetween foobarbazasdf bar baz
# 0
#
charsbetween() {
	local string str1 str2
	string="$1"
	str1="$2"
	str2="$3"

	# validate string
	if [[ "$string" != *"$str1"* || "$string" != *"$str2"* ]]; then
		echo -1
		return 1
	fi

	substr="$string"

	substr="$(longestr "$str1${substr#*$str1}" "$str2${substr#*$str2}")"
	if [[ "$substr" == "$str1"* ]]; then
		substr="${substr#$str1}"
		substr="${substr%%$str2*}"
	else
		substr="${substr#$str2}"
		substr="${substr%%$str1*}"
	fi

	echo ${#substr}
}

# usage: charsbetween <string> <substr1> <substr2> [substr3] ...
#
# Prints the number of intervening characters between <substr1> and other given
# <substr>'s in <string>
mincharsbetween() {
	local format substr1 substr2 retval
	format="$1"
	substr1="$2"
	shift 2

	retval="${#format}"
	for substr2 in "$@"; do
		dist="$(charsbetween "$format" "$substr1" "$substr2")"
		if (( dist != -1 && dist < retval )); then
			retval="$dist"
		fi
	done

	echo "$retval"
}

# parse args
date_args=()
format=
while (( $# )); do
	if [[ "$1" == +* ]]; then
		format="$1"
		shift
		date_args+=("$@")
		shift "$#"
	else
		date_args+=("$1")
		shift
	fi
done

# convert case of format specifiers
format="${format//yy/YY}"
format="${format//dd/DD}"
format="${format//hh/HH}"
format="${format//ss/SS}"
format="${format//mm/MM}"

# categorize different format sequences
date_formatters=(YY DD)
time_formatters=(HH SS)

# normalize the format so that YYYY is the same length as YY
normformat="${format//YYYY/YY}"
while [[ "$normaformat" == *YYYY* ]]; do
	normformat="${format//YYYY/YY}"
done

# loop through each instance of MM
while [[ "$format" == *MM* ]]; do
	# find shortest length between MM and date/time formatters
	date_dist="$(mincharsbetween "$normformat" MM "${date_formatters[@]}")"
	time_dist="$(mincharsbetween "$normformat" MM "${time_formatters[@]}")"
	
	# figure out how to convert MM
	# if the nearest formatter to MM is a $date_formatters, convert MM to month
	# if the nearest formatter to MM is a $time_formatters, convert MM to minute
	if (( date_dist <= time_dist )); then
		format="${format/MM/%m}"
		normformat="${normformat/MM/%m}"
	else
		format="${format/MM/%M}"
		normformat="${normformat/MM/%M}"
	fi
done

# convert format specifiers to date(1) format specifiers
format="${format//YYYY/%Y}"
format="${format//YY/%y}"
format="${format//DD/%d}"
format="${format//HH/%H}"
format="${format//SS/%S}"

date "${date_args[@]}" "$format"

