#!/bin/bash

# parse args
action="$1"
retval="$2"

# settings
CHECKMK_SNAPSHOTS_SPOOL="${CHECKMK_SNAPSHOTS_SPOOL-/var/lib/check_mk_agent/spool/$((3*24*60*60))_check_restic_snapshots}"
CHECKMK_SNAPSHOTS_THRESHOLDS="${CHECKMK_SNAPSHOTS_THRESHOLDS-1day:10:6}"
service=RESTIC_SNAPSHOTS 
spool="$CHECKMK_SNAPSHOTS_SPOOL"

# check config
IFS=: read period warn crit <<< "$CHECKMK_SNAPSHOTS_THRESHOLDS"
begindate="$(date -d -"$period" +%s)"
if [[ "$period" == *' '* || -z "$begindate" ]]; then
	echo "Invalid period, defaulting to 1day: $CHECKMK_SNAPSHOTS_THRESHOLDS" >&2
	begindate="$(date -d -"1day" +%s)"
elif [[ ! "$warn" =~ ^[0-9]+$ ]]; then
	echo "Invalid warning threshold, defaulting to 10: $CHECKMK_SNAPSHOTS_THRESHOLDS" >&2
	warn=10
elif [[ ! "$crit" =~ ^[0-9]+$ ]]; then
	echo "Invalid critical threshold, defaulting to 6: $CHECKMK_SNAPSHOTS_THRESHOLDS" >&2
	crit=6
fi

# send a message to check_mk's spool file
check_mk() {
	local retval="$1"
	local perfdata="$2"
	shift 2
	local message="$*"

	# create monitoring directory if it doesn't exist
	mkdir -p "$(dirname "$spool")"

	# update spool file
	echo "<<<local>>>" > "$spool"
	echo "$retval $service $perfdata $message" >> "$spool"
}

# bail if we're not called after a backup
if [[ "$action" != backup ]]; then
	exit
fi

# figure out the number of snapshots created in the past day
snaps=0
echo "Snapshots within last $period:"
while read date hostname; do
	snapdate="$(date -d "$date" +%s)"
	if (( snapdate > begindate )); then
		((snaps++))
		date -d "$date" +"%F %T %:z   $hostname"
	fi
done < <(restic snapshots -H "$HOSTNAME" --json | jq -r '.[]|[.time,.hostname]|@tsv')

# figure out what value to return
retval=0
if (( snaps <= crit )); then
	retval=1
elif (( snaps <= warn )); then
	retval=2
fi

# print output
perfdata="snapshots_$period=$snaps;$warn;$crit"
check_mk "$retval" "$perfdata" "$snaps snapshots taken in the past $period"

